<?php
/**
 * Created by PhpStorm.
 * User: dodo
 * Date: 2016/8/1
 * Time: 21:18
 */

namespace App\Background\Controllers;


use App\Models\Message;
use App\Models\MessageText;
use Plugin\Core\QSTBaseSearch;
use App\Background\Forms\MessageForm;
use Phalcon\Mvc\View;
use Plugin\Rbac\Models\Roles;

/**
 * Display the default index page.
 */
class MessageController extends BaseController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $menu = $this->menu;
        $menu['rbac']['active'] = true;
        $menu['rbac']['sub_menu']['news']['link_action'] = "admin/message";
        $menu['rbac']['sub_menu']['news']['active'] = true;
        $this->view->menu_root = $menu;
        $this->view->nav_menu = array_merge(array($this->view->nav_menu, array("name" => "系统消息管理", "link" => "admin/message")));
        $this->assets->addCss('public/static/background/css/common.css');
    }

    public function indexAction()
    {
        $this->response->redirect("admin/message/search");
    }

    public function searchAction()
    {
        $where = ' is_delete = 0';  //查询条件
        $rows_value = 10;   //一页显示多少条数据
        $startTime = $this->request->getQuery("mg_date_start");
        $endTime = $this->request->getQuery("mg_date_end");

        if($this->request->isPost()){
            $this->log($this->request->getPost());
        }

        // 加载CSS和JS资源
        $this->addLibJs("libs/jsapi/qst_linkpost.js");
        $this->addLibJs("libs/jsapi/table.js");
        $this->addLibJs("libs/js3party/bootstrap-terebentina-sco/1.0.2/js/sco.modal.js");
        $this->addLibJs("libs/js3party/bootstrap-terebentina-sco/1.0.2/js/sco.confirm.js");
        $this->assets->addCss(_LIBS_ . 'libs/js3party/bootstrap-datepicker/1.6.4/css/bootstrap-datepicker3.min.css', false)
            ->addJs(_LIBS_ . 'libs/js3party/bootstrap-datepicker/1.6.4/js/bootstrap-datepicker.min.js', false)
            ->addJs(_LIBS_ . 'libs/js3party/bootstrap-datepicker/1.6.4/locales/bootstrap-datepicker.zh-CN.min.js', false)
            ->addJs(_LIBS_ . 'libs/jsapi/qst_date_init.js', false);
//        $this->assets->addJs("public/static/background/js/thumbnail_init.js");
        // 数据-页头
        $pageHeader["title"] = "消息管理";
        $pageHeader["action"]["name"] = '<span class="fa fa-plus">&nbsp;&nbsp;发送消息</span>';;
        $pageHeader["action"]["link"] = "admin/message/new";
        $this->view->page_header = $pageHeader;

        // 数据-搜索栏
        $page_search = new QSTBaseSearch("admin/message/search");

        $page_search->addCondition([
            "type" => 2,
            "date_type" => 1,
            "label" => "发送日期",
            "data_start" => [
                "key" => "mg_date_start",
                "value" => $startTime
            ],
            "data_end" => [
                "key" => "mg_date_end",
                "value" =>  $endTime
            ],
        ]);
        $startTime = str_replace('年','-',str_replace('月','-',str_replace('日','',$startTime)));
        $endTime = str_replace('年','-',str_replace('月','-',str_replace('日','',$endTime)));

        $where .= empty($startTime) ? '' : ' and addTime >'.strtotime($startTime);
        $where .= empty($endTime) ? '' : ' and addTime <'.strtotime($endTime);

        $this->view->page_search = $page_search->toArray();

        // 定义表格字段
        $tb_ths = [];
        $tb_ths[] = array("name" => "发送对象", "width" => "150");
        $tb_ths[] = array("name" => "消息内容", "width" => "175");
        $tb_ths[] = array("name" => "发送日期", "width" => "130");
        $tb_ths[] = array("name" => "操作", "class" => "text-center", "width" => "175");

        // 定义表格操作
        // $actions = ["0"=>["name"=>"启用"], "1"=>["name"=>"禁用"]];
        $op = array(
            //["id_pre" => "et_", "name" => "编辑", "link" => "admin/message/edit"],
            ["id_pre" => "del_", "name" => "删除", "link" => "admin/message/delete", "method" => "post"]
        );
        $starNum = empty($page) || $page == 1 ? 0 : ($page-1) * $rows_value;
        //获取列表数据
        $ret = [];
        $number = MessageText::count($where);
        $data = MessageText::find(['conditions' =>$where,'order' => 'id desc','limit' =>['number' => $rows_value,'offset' =>$starNum]]);

        foreach($data as $value)
        {
            $row['id'] = 1000 + $value->id;
            $row['userid'] = $value->Roles->title;
            $row['message'] = mb_substr($value->message,0,30,'UTF-8');
            $row['addTime'] = date('Y-m-d H:i',$value->addTime);
            $ret[] = $row;
        }
        $using = array(
            ["field" => 'userid'],
            ["field" => 'message'],
            ["field" => 'addTime']
        );

        // 定义使用数据
        $tb_trs = array(
            "data" => $ret,
            "using" => $using,
            "op" => $op
        );

        // 数据-表格列表
        $page_table["ths"] = $tb_ths;
        $page_table["trs"] = $tb_trs;
        $this->view->page_table = $page_table;

        // 页码
//        $params = $this->request->getQuery();
        //获取总数据
        $data_count = $number;
        $total = ceil($data_count/$rows_value);
        $pagination_cur = $this->request->getQuery("page", null, 1);
        $uriStr = $this->request->getURI();
        $uriArray = parse_url($uriStr);
        $queryStr = $uriArray['query'];
        parse_str($queryStr, $queryArray);
        $queryArray['page'] = "";
        $page_pagination = [
            "url" => $this->url->get("admin/message/search?" . http_build_query($queryArray)),
            "cur" => $pagination_cur,
            "total" => $total,
            "rows_value" => $rows_value,
            'data_total' => $data_count
        ];
        $this->view->tb_page = $page_pagination;

        // 使用普通模板
        $this->view->pick("public/list_pagination_ex");
    }

    public function newAction()
    {
        $this->assets->addJs(_LIBS_ . 'libs/jsapi/base.js', false);
        $this->assets->addJs(_LIBS_ . 'libs/jsapi/qst_fileinput_init.js', false);
        // 数据-页头
        $pageHeader["title"] = "发送消息";
        $pageHeader["action"]["name"] = "消息列表";
        $pageHeader["action"]["link"] = "admin/Messsage";
        $this->view->page_header = $pageHeader;

        // 导航菜单
        $this->view->nav_menu = array_merge($this->view->nav_menu, array(array("name" => $pageHeader["title"])));

        $getRolesData = $this->getRoles();
        $Datas = [
            'roleid' => array($getRolesData,array( "required"=>"required", 'emptyValue' => 2))
        ];

        // 表单数据
        $form = new MessageForm($Datas);
        $form->setAction("admin/message/create");
        $this->view->form = $form;
        $this->view->pick("partials/tp_page_form_send");
    }

    public function createAction()
    {
        if ($this->request->isPost()) {
            // 1. 创建一个新的数据
            $userid = $this->session->get('auth-identity')['id'];
            $message = $this->request->getPost('message','string','');
            $roleid = $this->request->getPost('roleid','int',0);
            $messCount = MessageText::count('message = " '. $message .'" and roleid ='.$roleid);
            if(!$messCount){
                $messagetext = new MessageText();
                $messagetext->userid = $userid;
                $messagetext->message = $message;
                $messagetext->roleid = $roleid;
                $messagetext->addTime = time();
                if ($messagetext->save()) {
                    $this->response->redirect('admin/message/search');
                    //return $this->ajax_return(0, "success");
                }
            }
            $this->response->redirect('admin/message/search');
        }
        return $this->ajax_return(1, "error");
    }

    public function saveAction()
    {
        if ($this->request->isPost()) {
            // 1. get the permission base the id
            $messTData = $this->request->getPost();
            $id = $messTData['id'];
            $messages = MessageText::findFirst('id = '.($id - 1000));
            if (empty($messages->id)) {
                $status = 1;
                $desc = "failed. the permission is not exist";
            } else {
                $messages->roleid = $messTData['roleid'];
                $messages->message = $messTData['message'];
                $messages->save();
                $this->response->redirect('admin/message/search');
            }
            $this->response->redirect('admin/message/search');
            //return $this->ajax_return(0, "success");
        }
        return $this->ajax_return(1, "error");
    }

    /**
     * 列表页面执行删除操作
     */
    public function deleteAction()
    {
        if ($this->request->isPost()) {
            $id = $this->request->getQuery("id");

            $messT = MessageText::findFirst(' id = ' . ($id - 1000));
            if (!empty($messT->id)) {
                $messT->is_delete = 1;
                if($messT->save() == false){
                    return $this->ajax_return(1, "error");
                }
            }
        }
        return $this->ajax_return(0, "success");
    }

    public function editAction()
    {
        $this->assets->addJs(_LIBS_ . 'libs/jsapi/base.js', false);
        $this->assets->addJs(_LIBS_ . 'libs/jsapi/qst_fileinput_init.js', false);

        $pageHeader["title"] = "编辑消息";
        $pageHeader["action"]["name"] = "消息列表";
        $pageHeader["action"]["link"] = "admin/message";
        $this->view->page_header = $pageHeader;

        // 导航菜单
        $this->view->nav_menu = array_merge($this->view->nav_menu, array(array("name" => $pageHeader["title"])));

        // TODO 数据关联ID
        $id = $this->request->getQuery("id");

        // TODO 根据关联ID获取数据
        $messageT = MessageText::findFirst('id = '.($id - 1000));
        $getRolesData = $this->getRoles();
        $messageData = [
            'id' => $id,
            'roleid' => array($getRolesData,array("required"=>"required"), $messageT->roleid),
            'message' => $messageT->message
        ];

        // 表单数据
        $form = new MessageForm($messageData);
        $form->setAction("admin/message/save");
        $this->view->form = $form;
        $this->view->pick("partials/tp_page_form_send");
    }

    private function getRoles(){
        $RolesObj = Roles::find(' id != 1 and activity = 1');
        $RolesData= '';
        foreach ($RolesObj as $row) {
            $RolesData[$row->id] = $row->title;

        }
        $RolesData[-1] = '前端用户';
        return $RolesData;
    }

    public function getMessageAction(){
        $rows_value = 10;   //一页显示多少条数据
        $userid = $this->session->get('auth-identity')['id'];//获取用户id
        $roleid = $this->session->get('auth-identity')['profile'];//获取所属用户组
        $startTime = $this->request->getQuery("mg_date_start");
        $endTime = $this->request->getQuery("mg_date_end");

        if($this->request->isPost()){
            $this->log($this->request->getPost());
        }

        $menu = $this->menu;
        $menu['rbac']['active'] = true;
        $menu['rbac']['sub_menu']['news']['link_action'] = "admin/message/getMessage";
        $menu['rbac']['sub_menu']['news']['active'] = true;
        $this->view->menu_root = $menu;

        // 加载CSS和JS资源
        $this->assets->addCss(_LIBS_ . 'libs/js3party/bootstrap-datepicker/1.6.4/css/bootstrap-datepicker3.min.css', false)
            ->addJs(_LIBS_ . 'libs/js3party/bootstrap-datepicker/1.6.4/js/bootstrap-datepicker.min.js', false)
            ->addJs(_LIBS_ . 'libs/js3party/bootstrap-datepicker/1.6.4/locales/bootstrap-datepicker.zh-CN.min.js', false)
            ->addJs(_LIBS_ . 'libs/jsapi/qst_date_init.js', false);
//        $this->assets->addJs("public/static/background/js/thumbnail_init.js");
        // 数据-页头
        $pageHeader["title"] = "消息管理";
        $this->view->page_header = $pageHeader;

        // 数据-搜索栏
        $page_search = new QSTBaseSearch("admin/message/getMessage");

        $page_search->addCondition([
            "type" => 2,
            "date_type" => 1,
            "label" => "发送日期",
            "data_start" => [
                "key" => "d_start",
                "value" => date('Y-m-d')
            ],
            "data_end" => [
                "key" => "d_end",
                "value" =>  date('Y-m-d')
            ],
        ]);

        $startTime = str_replace('年','-',str_replace('月','-',str_replace('日','',$startTime)));
        $endTime = str_replace('年','-',str_replace('月','-',str_replace('日','',$endTime)));
        $where = '';
        $where .= empty($startTime) ? '' : ' addTime >'.strtotime($startTime);
        $where .= empty($endTime) ? '' : ' and addTime <'.strtotime($endTime);

        $this->view->page_search = $page_search->toArray();

        // 定义表格字段
        $tb_ths = [];
        $tb_ths[] = array("name" => "消息内容", "width" => "175");
        $tb_ths[] = array("name" => "发送日期", "width" => "130");
        $tb_ths[] = array("name" => "操作", "class" => "text-center", "width" => "175");

        // 定义表格操作
        // $actions = ["0"=>["name"=>"启用"], "1"=>["name"=>"禁用"]];
        $op = array(
            ['multiple' =>[1=>['name'=>'已读'],0=>['name'=>'未读']],'key'=>'statue',"link" => "admin/message/show"]
        );
        $starNum = empty($page) || $page == 1 ? 0 : ($page-1) * $rows_value;
        //获取列表数据
        $ret = [];
        //获取未读信息
        $data = MessageText::find(['order' => 'id desc']);
        foreach($data as $value)
        {
            $messagedata = Message::findFirst('recid = '. $userid .'  and messageid = '.$value->id);
            if(empty($messagedata->id) && $value->roleid == $roleid){
                $messages = new Message();
                $messages->sendid = $value->userid;
                $messages->recid = $userid;
                $messages->messageid = $value->id;
                $messages->addTime = $value->addTime;
                $messages->addTime = $value->addTime;
                $messages->statue = 0;
                $messages->save();
            }
        }
        //获取消息列表
        $datas = Message::find(['conditions' =>(empty($where)? '' : $where . ' and ').' recid = '.$userid,'order' => 'id desc','limit' =>['number' => $rows_value,'offset' =>$starNum]]);
        $number = $datas->count('recid = '.$userid);
        foreach($datas as $values)
        {
            $row['id'] = 1000 + $values->id;
            $row['message'] = mb_substr($values->messagetext->message,0,30,'UTF-8');
            $row['addTime'] = date('Y-m-d H:i',$values->addTime);
            $row['statue'] = $values->statue;
            $ret[] = $row;
        }


        $using = array(
            ["field" => 'message'],
            ["field" => 'addTime']
        );

        // 定义使用数据
        $tb_trs = array(
            "data" => $ret,
            "using" => $using,
            "op" => $op
        );

        // 数据-表格列表
        $page_table["ths"] = $tb_ths;
        $page_table["trs"] = $tb_trs;
        $this->view->page_table = $page_table;

        // 页码
//        $params = $this->request->getQuery();
        //获取总数据
        $data_count = $number;
        $total = ceil($data_count/$rows_value);
        $pagination_cur = $this->request->getQuery("page", null, 1);
        $uriStr = $this->request->getURI();
        $uriArray = parse_url($uriStr);
        $queryStr = $uriArray['query'];
        parse_str($queryStr, $queryArray);
        $queryArray['page'] = "";
        $page_pagination = [
            "url" => $this->url->get("admin/message/getMessage?" . http_build_query($queryArray)),
            "cur" => $pagination_cur,
            "total" => $total,
            "rows_value" => $rows_value,
            'data_total' => $data_count
        ];
        $this->view->tb_page = $page_pagination;

        // 使用普通模板
        $this->view->pick("public/list_pagination_ex");
    }

    public function showAction()
    {
        if ($this->request->isGet()) {
            $messId = $this->request->getQuery("id");
            $messId = $messId - 1000;
            $messages = Message::findFirst('id = '.$messId);
            $messages->statue = 1;
            $messages->update();
        }
        $this->response->redirect("admin/message/getMessage");
    }

}
