<?php
/**
 * Created by PhpStorm.
 * User: dodo
 * Date: 2016/8/1
 * Time: 21:18
 */

namespace App\Background\Controllers;

use App\Models\Goods;
use App\Models\Depot;
use App\Models\Category;
use App\Models\OrderGoods;
use Plugin\Core\QSTBaseSearch;
use App\Background\Forms\GoodsForm;
use Phalcon\Mvc\View;

/**
 * Display the default index page.
 */
class GoodsController extends BaseController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $menu = $this->menu;
        $menu['goods']['active'] = true;
        $menu['goods']['sub_menu']['goods']['link_action'] = "admin/goods";
        $menu['goods']['sub_menu']['goods']['active'] = true;
        $this->view->menu_root = $menu;
        $this->view->nav_menu = array_merge(array($this->view->nav_menu, array("name" => "商品管理", "link" => "admin/goods")));
        $this->assets->addCss('public/static/background/css/common.css');
    }

    public function indexAction()
    {
        $this->response->redirect("admin/goods/search");
    }

    public function searchAction()
    {
        $where = ' is_delete = 0 ';  //查询条件
        $rows_value = 10;   //一页显示多少条数据
        $key = $this->request->getQuery("search_key");
        $value = $this->request->getQuery("search_value");
        $page = $this->request->getQuery("page");
        $cat_id = $this->request->getQuery('cat_id','string');
        $cat_ide = $this->request->getQuery('cat_ide','int',0);
        $depot_id = $this->request->getQuery('depot_id');
        $is_integral = $this->request->getQuery('is_integral');

//        if($this->request->isPost()){
           //$this->log($this->request->getPost());
//        }

        // 加载CSS和JS资源
        $this->addLibJs("libs/jsapi/qst_linkpost.js");
        $this->addLibJs("libs/jsapi/table.js");
        $this->addLibJs("libs/js3party/bootstrap-terebentina-sco/1.0.2/js/sco.modal.js");
        $this->addLibJs("libs/js3party/bootstrap-terebentina-sco/1.0.2/js/sco.confirm.js");
        $this->assets->addCss(_LIBS_ . 'libs/js3party/bootstrap-datepicker/1.6.4/css/bootstrap-datepicker3.min.css', false)
            ->addJs(_LIBS_ . 'libs/js3party/bootstrap-datepicker/1.6.4/js/bootstrap-datepicker.min.js', false)
            ->addJs(_LIBS_ . 'libs/js3party/bootstrap-datepicker/1.6.4/locales/bootstrap-datepicker.zh-CN.min.js', false)
            ->addJs(_LIBS_ . 'libs/jsapi/qst_date_init.js', false);
//        $this->assets->addJs("public/static/background/js/thumbnail_init.js");
        // 数据-页头
        $pageHeader["title"] = "商品管理";
        $pageHeader["action"]["name"] = '<span class="fa fa-plus">&nbsp;&nbsp;添加商品</span>';;
        $pageHeader["action"]["link"] = "admin/goods/new";
        $this->view->page_header = $pageHeader;

        // 数据-搜索栏
        $page_search = new QSTBaseSearch("admin/goods/search");

        $page_search->addCondition([
            'type' => 0,
            'key_default' => $key,
            'value_default' => $value,
            'keys' => ['goods_name' => '商品名称','goods_id'=>'商品编号']

        ]);

        $page_search->addCondition([
            'type' => 1,
            'label' => '',
            'key' => 'cat_id',
            'value' => $cat_id,
            'options' => ['goods_name' => '一级分类','goods_id'=>'二级分类']

        ]);

        $page_search->addCondition([
            'type' => 1,
            'label' => '',
            'key' => 'cat_ide',
            'value' => 0,
            'options' => []

        ]);

        $page_search->addCondition([
            'type' => 1,
            'label' => '所属仓库',
            'key' => 'depot_id',
            'value' => $depot_id,
            'options' => $depotData= $this->getDepot()

        ]);

        $page_search->addCondition([
            'type' => 1,
            'label' => '是否是积分商品',
            'key' => 'is_integral',
            'value' => $is_integral,
            'options' => [-1=>'否',1=>'是']

        ]);
        $catData = $this->getCategory();
        $this->view->page_search = $page_search->toArray();
        if(!empty($value) && !empty($key)){
            $where .= $key=='goods_id'? 'and '. $key . ' = ' . trim($value) : 'and '. $key . ' like "%' . trim($value) .'%"';
        }
        $where .= empty($depot_id) ? '' : ' and depot_id = '. $depot_id ;
        if(!empty($cat_ide)){
            $cate_id = empty($cat_ide) ? '' : ltrim($cat_ide,'id') ;
            $cateData = Category::findFirst('id = '.$cat_ide);
            if(empty($cateData->pid)){
                $cateDatas = Category::find('pid = '.$cat_ide);
                $cateidss = '';
                foreach($cateDatas as $value){
                    $cateidss[] = $value->id;
                }
                $where .= ' and cat_id in('.implode(',',$cateidss).')';
            }else{
                $where .= empty($cat_ide) ? '' : ' and cat_id = '. ltrim($cat_ide,'id') ;
            }
        }

        $where .= empty($is_integral) ? '' : ' and is_integral = '. ($is_integral == -1 ? 0 : 1);
        $reqParam = empty($page) ? '':'?page='.$page;
        // 定义表格字段
        $tb_ths = [];
        $tb_ths[] = array("name" => "商品名称", "width" => "150");
        $tb_ths[] = array("name" => "一级分类", "width" => "135");
        $tb_ths[] = array("name" => "二级分类", "width" => "135");
        $tb_ths[] = array("name" => "所属仓库", "width" => "130");
        $tb_ths[] = array("name" => "库存", "width" => "70");
        $tb_ths[] = array("name" => "销售量", "width" => "90");
        $tb_ths[] = array("name" => "访问量", "width" => "80");
        $tb_ths[] = array("name" => "单价", "width" => "70");
        $tb_ths[] = array("name" => "状态", "width" => "100");
        $tb_ths[] = array("name" => "积分兑换", "width" => "135");
        $tb_ths[] = array("name" => "推荐", "width" => "65");
        $tb_ths[] = array("name" => "录入时间", "width" => "230");
        $tb_ths[] = array("name" => "操作", "class" => "text-center", "width" => "175");

        // 定义表格操作
        // $actions = ["0"=>["name"=>"启用"], "1"=>["name"=>"禁用"]];
        $op = array(
            ["id_pre" => "et_", "name" => "编辑", "link" => "admin/goods/edit".$reqParam],
            ["id_pre" => "del_", "name" => "删除", "link" => "admin/goods/delete", "method" => "post"],
            ['multiple' =>[0=>['name'=>'设为推荐'] ,1=>['name'=>'取消推荐']],'key'=>'is_recoms',"link" => "admin/goods/recom"],
            ['multiple' =>[1=>['name'=>'下架'],0=>['name'=>'上架']],'key'=>'is_on_sales',"link" => "admin/goods/onsale"]
        );
        $starNum = empty($page) || $page == 1 ? 0 : ($page-1) * $rows_value;
        //获取列表数据
        $ret = [];
        $number = Goods::count($where);
        $data = Goods::find(['conditions' =>$where,'order' => 'goods_id desc','limit' =>['number' => $rows_value,'offset' =>$starNum]]);

        foreach($data as $value)
        {
            $row['id'] = '<a href="/sunny/admin/goods/show?id='.$value->goods_id.'">'.$value->goods_id.'</a>';
            $row['goods_id'] = $value->goods_id;
            $row['goods_name'] = mb_substr($value->goods_name,0,30,'UTF-8');
            $row['cat_id'] = $value->Category->name;                //根据关联关系获取分类名称
            $row['title'] = $value->Category->title;                //根据关联关系获取分类名称
            $row['depot_id'] = $value->Depot->title;            //根据关联关系获取仓库名称
            $row['goods_number'] = $value->goods_number;
            $row['sales_volume'] = $this->getSellNum($value->goods_id).'单';   //调用外部方法获取销售量
            $row['click_count'] = $value->click_count;
            $row['shop_price'] = empty($value->is_integral)?  $value->shop_price.'元':$value->integral.'积分';
            $row['is_on_sale'] = empty($value->is_on_sale) ? '未上架' : '已上架' ;
            $row['is_integral'] = empty($value->is_integral) ? '否' : '是' ;
            $row['is_recom'] = empty($value->is_recom) ? '否' : '是' ;
            $row['is_recoms'] = $value->is_recom;
            $row['is_on_sales'] = $value->is_on_sale;
            $row['addTime'] = date('Y-m-d H:i',$value->addTime);
            $ret[] = $row;
        }
        $using = array(
            ["field" => 'goods_name'],
            ["field" => 'cat_id'],
            ["field" => 'title'],
            ["field" => 'depot_id'],
            ["field" => 'goods_number'],
            ["field" => 'sales_volume'],
            ["field" => 'click_count'],
            ["field" => 'shop_price'],
            ["field" => 'is_on_sale'],
            ["field" => 'is_integral'],
            ["field" => 'is_recom'],
            ["field" => 'addTime']
        );

        // 定义使用数据
        $tb_trs = array(
            "data" => $ret,
            "using" => $using,
            "op" => $op
        );

        // 数据-表格列表
        $page_table["ths"] = $tb_ths;
        $page_table["trs"] = $tb_trs;
        $this->view->page_table = $page_table;

        // 页码
//        $params = $this->request->getQuery();
        //获取总数据
        $data_count = $number;
        $total = ceil($data_count/$rows_value);
        $pagination_cur = $this->request->getQuery("page", null, 1);
        $uriStr = $this->request->getURI();
        $uriArray = parse_url($uriStr);
        $queryStr = $uriArray['query'];
        parse_str($queryStr, $queryArray);
        $queryArray['page'] = "";
        $page_pagination = [
            "url" => $this->url->get("admin/goods/search?" . http_build_query($queryArray)),
            "cur" => $pagination_cur,
            "total" => $total,
            "rows_value" => $rows_value,
            'data_total' => $data_count
        ];
        $this->view->pData = json_encode($catData[0]);
        $this->view->cData = json_encode($catData[1]);
        $this->view->cat_ide = empty($cat_ide)?0 :$cat_ide;
        $this->view->tb_page = $page_pagination;

        // 使用普通模板
        $this->view->pick("goods/index");
    }

    public function newAction()
    {
        $this->assets->addJs(_LIBS_ . 'libs/jsapi/base.js', false);
        $this->assets->addJs(_LIBS_ . 'libs/jsapi/qst_fileinput_init.js', false);
        $this->assets->addJs(_LIBS_ . 'libs/jsapi/goods.js', false);
        // 数据-页头
        $pageHeader["title"] = "添加商品";
        $pageHeader["action"]["name"] = "商品列表";
        $pageHeader["action"]["link"] = "admin/goods";
        $this->view->page_header = $pageHeader;

        $pcate_id = 0;//父id
        $cate_id = 0;//二级分类id
        // 导航菜单
        $this->view->nav_menu = array_merge($this->view->nav_menu, array(array("name" => $pageHeader["title"])));

        $depotData= $this->getDepot();//获取所用仓库
        $cateDatas = $this->getCategory();//获取所有分类
        $cateDatass = [
            'depot_id' => array($depotData,array('useEmpty' => true, 'emptyText' => '请选择仓库', "required"=>"required", 'emptyValue' => '')),
            'cat_id' => array($cateDatas[0],array('useEmpty' => true, 'emptyText' => '请选择栏目', "required"=>"required", 'emptyValue' => '')),
            'is_show' => true
        ];

        // 表单数据
        $form = new GoodsForm($cateDatass);
        //print_r($form);exit;
        $form->setAction("admin/goods/create");
        $this->view->form = $form;
        $this->view->cate_id = $cate_id;
        $this->view->pcate_id = $pcate_id;
        $this->view->cat_ids = json_encode($cateDatas[1]);
        $this->view->pick("goods/add");
    }

    public function createAction()
    {
        if ($this->request->isPost()) {
            if(empty($this->request->getPost('cat_ide'))){
                echo '<script>alert("二级分类不能为空！");history.go(-1);</script>';exit;
            }
            // 1. 创建一个新的数据
            $goods = new Goods();
            $goods->depot_id = $this->request->getPost('depot_id');
            $goods->cat_id = trim($this->request->getPost('cat_ide'),'id');
            $goods->goods_name = $this->request->getPost('goods_name');
            //$goods->click_count = $this->request->getPost('click_count');
            $goods->goods_brief = $this->request->getPost('goods_brief');
            $goods->market_price = $this->request->getPost('market_price');
            $goods->shop_price = $this->request->getPost('shop_price');
            $goods->goods_number = $this->request->getPost('goods_number');
            $goods->is_integral = empty($this->request->getPost('is_integral')) ? 0 : 1;
            $goods->integral = empty($this->request->getPost('integral')) ? 0 :$this->request->getPost('integral');
            $goods->con_integral = $this->request->getPost('con_integral');
            $goods->fran_cash = $this->request->getPost('fran_cash');
            $goods->ref_integral = $this->request->getPost('ref_integral');
            $goods->good_introduction = $this->request->getPost('good_introduction');
            $goods->good_details = $this->request->getPost('good_details');
            $goods->good_spec = $this->request->getPost('good_spec');
            $goods->is_on_sale = 0;
            $goods->sort_order = $this->request->getPost('sort_order');
            $goods->is_show = $this->request->getPost('is_show');
            $goods->last_update = time();
            $goods->addTime = time();
            if ($goods->save()) {
                return $this->response->redirect('admin/goods/search');
                exit;
                //return $this->ajax_return(0, "success");
            }
        }
        echo '<script>alert("添加失败！");history.go(-1);</script>';exit;
    }

    public function saveAction()
    {
        if ($this->request->isPost()) {
            // 1. get the permission base the id
            $goodsData = $this->request->getPost();
            $goods_Id = $goodsData['id'];
            $goods = Goods::findFirst('goods_id = '.$goods_Id);
            if (empty($goods->goods_id)) {
                $status = 1;
                $desc = "failed. the permission is not exist";
            } else {
                $goods->goods_id = $goods_Id;
                $goodsData['cat_id'] = trim($goodsData['cat_ide'],'id');
                $goodsData['is_integral'] = empty($goodsData['is_integral'])? 0 : 1;
                unset($goodsData['cat_ide']);
                $goods->save($goodsData);
                $this->response->redirect('admin/goods/search');
            }
            $reqStr = '';
            if(!empty($goodsData['page'])){
                $reqStr = '?page='.$goodsData['page'].'#et_'.$goods_Id;
            }
            $this->response->redirect('admin/goods/search'.$reqStr);
            //return $this->ajax_return(0, "success");
        }
        return $this->ajax_return(1, "error");
    }

    /**
     * 列表页面执行删除操作
     */
    public function deleteAction()
    {
        $goods_Id = $this->request->getQuery("id");
        $goods = Goods::findFirst(' is_on_sale = 0 and goods_id = ' . $goods_Id);
        if ($goods) {
            if($goods->delete() == false){
                return $this->ajax_return(1, "error");
            }
            return $this->ajax_return(0, "success");
        }
        return $this->ajax_return(1, "error");
    }

    public function recomAction(){
        //拼接url后的参数
        $retUrl = explode('&',explode('?',$_SERVER["REQUEST_URI"])[1]);
        unset($retUrl[0],$retUrl[1]);
        $retUrl = implode('&',$retUrl);

        if ($this->request->isGet()) {
            $goods_Id = $this->request->getQuery("id");
            $is_recom = $this->request->getQuery("is_recoms");
            $goods = Goods::findFirst('goods_id = ' . $goods_Id);
            if (!empty($goods->goods_id)) {
                $goods->is_recom = empty($is_recom)? 1 : 0;
                $goods->save();
            }
        }
        $retUrl =  "admin/goods/search?".$retUrl.'#MG'.$goods_Id;;
        $this->response->redirect($retUrl);
    }

    public function onsaleAction(){
        //拼接url后的参数
        $retUrl = explode('&',explode('?',$_SERVER["REQUEST_URI"])[1]);
        unset($retUrl[0],$retUrl[1]);
        $retUrl = implode('&',$retUrl);

        if ($this->request->isGet()) {
            $goods_Id = $this->request->getQuery("id");
            $is_on_sale = $this->request->getQuery("is_on_sales");
            $goods = Goods::findFirst(' goods_id = ' . $goods_Id);
            if ($goods) {
                $goods->is_on_sale = empty($is_on_sale)? 1 : 0;
                $goods->on_saleTime = empty($is_on_sale)? time() : 0;
                $goods->save();
            }
        }
        $retUrl =  "admin/goods/search?".$retUrl.'#MG'.$goods_Id;
        $this->response->redirect($retUrl);
    }

    public function editAction()
    {
        $this->assets->addJs(_LIBS_ . 'libs/jsapi/base.js', false);
        $this->assets->addJs(_LIBS_ . 'libs/jsapi/qst_fileinput_init.js', false);
        $this->assets->addJs(_LIBS_ . 'libs/jsapi/goods.js', false);

        $pageHeader["title"] = "编辑商品";
        $pageHeader["action"]["name"] = "商品列表";
        $pageHeader["action"]["link"] = "admin/Goods";
        $this->view->page_header = $pageHeader;

        // 导航菜单
        $this->view->nav_menu = array_merge($this->view->nav_menu, array(array("name" => $pageHeader["title"])));

        // TODO 数据关联ID
        $id = $this->request->getQuery("id");
        $page = $this->request->getQuery("page");
        $retUrl = $this->request->get('retUrl');
        // TODO 根据关联ID获取数据
        $goodsOne = Goods::findFirst('goods_id = '.$id);

        $depotData= $this->getDepot();//获取所有仓库
        $cateData = $this->getCategory();//获取所有栏目
        //print_r($cateData);exit;
        //识别出父id 和子id
        $pcate_id = $goodsOne->cat_id;//父id
        $cate_id = 0;//二级分类id
        foreach($cateData[1] as $key => $value){
            foreach($value as $val){
                if($val['id'] == $pcate_id){
                    $pcate_id = $val['pid'];
                    $cate_id = $val['id'];
                }
            }
        }

        $goodsData = [
            'id' => $id,
            'depot_id' => array($depotData,array('useEmpty' => true, 'emptyText' => '请选择仓库', "required"=>"required"), $goodsOne ->depot_id),
            'cat_id' => array($cateData[0],array('useEmpty' => true, 'emptyText' => '请选择分类', "required"=>"required"), 'id' . $pcate_id),
            'goods_name' => $goodsOne -> goods_name,
            //'click_count' => $goodsOne -> click_count,
            'goods_brief' => $goodsOne -> goods_brief,
            'market_price' => $goodsOne -> market_price,
            'shop_price' => $goodsOne -> shop_price,
            'goods_number' => $goodsOne -> goods_number,
            'is_integral' => empty($goodsOne -> is_integral) ? false : true,
            'integral' => $goodsOne -> integral,
            'con_integral' => $goodsOne -> con_integral,
            'fran_cash' => $goodsOne -> fran_cash,
            'ref_integral' => $goodsOne -> ref_integral,
            'good_introduction' => $goodsOne -> good_introduction,
            'good_details' => $goodsOne -> good_details,
            'good_spec' => $goodsOne -> good_spec,
            'page' => (empty($page) ? 0 : $page),
            'is_recom' => empty($goodsOne -> is_recom) ? false : true,
            'sort_order' => $goodsOne -> sort_order,
            'is_show' => empty($goodsOne -> is_show) ? true : false
        ];

        // 表单数据
        $form = new GoodsForm($goodsData);
        $form->setAction("admin/goods/save");
        $this->view->form = $form;
        $this->view->cate_id = $cate_id;
        $this->view->pcate_id = $pcate_id;
        $this->view->retUrl = $retUrl;
        $this->view->cat_ids = json_encode($cateData[1]);

        $this->view->pick("goods/add");
    }

    public function showAction(){
        $pageHeader["title"] = "查看商品";
        $pageHeader["action"]["name"] = "商品详情页";
        $pageHeader["action"]["link"] = "admin/goods/show";
        $this->view->page_header = $pageHeader;

        // 导航菜单
        $this->view->nav_menu = array_merge($this->view->nav_menu, array(array("name" => $pageHeader["title"])));
        $Category = $this->getCategory();
        $depot = $this->getDepot();
        $goods_Id = $this->request->getQuery("id");
        $goodsData = '';
        if(!empty($goods_Id)){
            $goodsData = Goods::findFirst('goods_id = '.$goods_Id);
        }
        $cateData = $this->getCategoryName($goodsData->cat_id);
        //获取父栏目名
        $parentName = $childName = '';

        if(!empty($cateData['pid'])){
            $parentName = $Category[0][$cateData['pid']];
            $childName = '';
            foreach($Category[1][$cateData['pid']] as $val){
                if($val['id'] == $cateData['id']){
                    $childName = $val['title'];
                }
            }
        }else{
            $parentName = $Category[0]['id'];
        }

        $goodsDatas = [
            'goods_name' => $goodsData->goods_name,
            'goods_id' => $goodsData->goods_id,
            'cat_id' => $parentName,
            'cat_ids' => $childName,
            'depot_id' => $depot[$goodsData->depot_id],
            'goods_number' => $goodsData->goods_number,
            'click_count' => $goodsData->click_count,
            'sellNum' => $this->getSellNum($goodsData->goods_id),
            'market_price' => $goodsData->market_price,
            'shop_price' => $goodsData->shop_price,
            'integral' => $goodsData->integral,
            'is_on_sale' => empty($goodsData->is_on_sale)?'未上架':'已上架',
            'con_integral' => ($goodsData->con_integral / 100) * $goodsData->shop_price,
            'ref_integral' => ($goodsData->ref_integral / 100) * $goodsData->shop_price,
            'fran_cash' => ($goodsData->fran_cash / 100) * $goodsData->shop_price,
            'goods_brief' => $goodsData->goods_brief,
            'good_details' => $this->getThuPic($goodsData->good_details),
            'good_spec' => $this->getThuPic($goodsData->good_spec),
            'good_introduction' => $this->getThuPic($goodsData->good_introduction),
            'addTime' => date('Y-m-d H:i:s',$goodsData->addTime)
        ];
        $this->view->goodsData = $goodsDatas;
        $this->view->pick("goods/show");

    }
    private function getCategory($pid = 0){
        $cateObj = Category::find();
        $cateData = [];

        foreach ($cateObj as $key => $row) {
            $spaces = '';
            if( !empty($row->pid) ){
                $sunData[$row->pid][] = ['id' => $row->id,'pid'=>$row->pid, 'title' => $row->title];//子类
            }else{
                $cateData[$row->id] = $row->name;//父类
            }
        }
        $arr =[
            $cateData,
            $sunData
        ];
        return $arr;
    }

    private function getCategoryName($cate_id=0){
        $where = ' 1 = 1';
        if(!empty($cate_id)){
            $where = ' id = '.$cate_id;
        }
        $cateObj = Category::findFirst($where);
        $cateData = [];
        if(empty($cateObj->pid)){
            $cateData = ['id' => $cateObj->id];
        }else{
            $cateData = ['id' => $cateObj->id , 'pid' => $cateObj->pid];
        }
        return $cateData;
    }

    private function getDepot(){
        $depotObj = Depot::find('is_show = 1');
        $depotData= [];
        foreach ($depotObj as $row) {
            $depotData[$row->id] = $row->title;

        }
        return $depotData;
    }

    private function getThuPic($path){
        $str = '';
        if(!empty($path)){
            $path = trim($path, '] [');
            if(strpos(',',$path) === false){
                $path = trim($path, '" "');
                $str .= '<div class="file-preview-thumbnails"><div class="file-initial-thumbs"><div class="file-preview-frame file-preview-initial" id="preview-1486227215822-init_0" data-fileindex="init_0" data-template="image"><div class="kv-file-content">
<img src="'.$path.'" class="kv-file-zoom kv-preview-data file-preview-image" style="width:auto;height:160px;">
</div></div></div></div>';
            }else{
                $pathDatas = explode($path,',');
                foreach($pathDatas as $value){
                    $value = trim($value, '" "');
                    $str .= '<div class="file-preview-thumbnails"><div class="file-initial-thumbs"><div class="file-preview-frame file-preview-initial" id="preview-1486227215822-init_0" data-fileindex="init_0" data-template="image"><div class="kv-file-content">
<img src="'.$value.'" class="kv-file-zoom kv-preview-data file-preview-image" style="width:auto;height:160px;">
</div></div></div></div>';
                }
            }
        }
        return $str;
    }

    private function getSellNum($goods_id){
        $num = 0;
        if(!empty($goods_id)){
            $sqlss = 'SELECT g.ordercode,g.goods_id,SUM(g.num) as num from qst_order_goods g LEFT JOIN qst_ordercode o ON g.ordercode = o.ordercode WHERE g.goods_id='.$goods_id.' and o.vstate in(1,2,3)';
            $goodsNum = $this->db->query($sqlss);
            while ($goodsInof = $goodsNum->fetch(2)) {
                $num = empty($goodsInof['num'])? 0 : $goodsInof['num'];
            }
        }
        return $num;
    }
}
