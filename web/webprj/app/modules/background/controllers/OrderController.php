<?php
/**
 * Created by PhpStorm.
 * User: dodo
 * Date: 2016/8/1
 * Time: 21:18
 */

namespace App\Background\Controllers;

use App\Models\Depot;
use App\Models\Franchise;
use App\Models\Goods;
use App\Models\Member;
use App\Models\MemberInfo;
use App\Models\Order;
use App\Models\OrderGoods;
use App\Models\OrderLog;
use Plugin\Core\QSTBaseSearch;
use App\Background\Forms\RefundAddForm;
use Phalcon\Mvc\View;

/**
 * Display the default index page.
 */
class OrderController extends BaseController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $menu = $this->menu;
        $menu['order']['link_action'] = "admin/order";
        $menu['order']['active'] = true;
        $this->view->menu_root = $menu;
        $this->view->nav_menu = array_merge(array($this->view->nav_menu, array("name" => "订单管理", "link" => "admin/order")));
        $this->assets->addCss('public/static/background/css/common.css');
    }

    public function indexAction()
    {
        $this->response->redirect("admin/order/search");
    }

    public function searchAction()
    {
        $where = ' 1 = 1';  //查询条件
        $rows_value = 10;   //一页显示多少条数据
        $oid = $this->request->getQuery("oid");
        $page = $this->request->getQuery("page");
        $tel = $this->request->getQuery("tel");
        $state = $this->request->getQuery("state");
        $d_start = $this->request->getQuery('d_start');
        $d_end = $this->request->getQuery('d_end');
        $type = $this->request->getQuery("type");
        $depot_id = $this->request->getQuery("depot_id");


        if($this->request->isPost()){
            $this->log($this->request->getPost());
        }
        // 加载CSS和JS资源
        $this->assets->addCss(_LIBS_ . 'libs/js3party/bootstrap-datepicker/1.6.4/css/bootstrap-datepicker3.min.css', false)
            ->addJs(_LIBS_ . 'libs/js3party/bootstrap-datepicker/1.6.4/js/bootstrap-datepicker.min.js', false)
            ->addJs(_LIBS_ . 'libs/js3party/bootstrap-datepicker/1.6.4/locales/bootstrap-datepicker.zh-CN.min.js', false)
            ->addJs(_LIBS_ . 'libs/jsapi/qst_date_init.js', false);

        // 数据-页头
        $pageHeader["title"] = "订单管理";
        $roleid = $_SESSION['auth-identity']['profile'];//获取角色权限
        if(empty($roleid)){
            $pageHeader["action"]["name"] = '<span class="fa fa-download">&nbsp;&nbsp;导出Excel</span>';
            $pageHeader["action"]["link"] = "admin/order/search?type=excel";
        }
        $this->view->page_header = $pageHeader;

        $depotDatas = $this->getDepot();
        // 数据-搜索栏
        $page_search = new QSTBaseSearch("admin/order/search");

        $page_search->addCondition([
            'type' => 4,
            'label' => '订单号',
            'value' => $oid,
            'key' => 'oid'
        ]);

        $page_search->addCondition([
            'type' => 4,
            'label' => '收货人电话',
            'value' => $tel,
            'key' => 'tel'
        ]);

        $page_search->addCondition([
            'type' => 1,
            'label' => '订单状态',
            'key' => 'state',
            'value' => $state,
            'options' => [-1 =>'待支付',1 =>'待发货','待收货','交易完成','退款中','已退款','交易关闭']

        ]);

        $page_search->addCondition([
            "type" => 2,
            "date_type" => 1,
            "label" => "订单提交时间",
            "date_start" => [
                "key" => "d_start",
                "value" => empty($d_start)? '' : $d_start
            ],
            "date_end" => [
                "key" => "d_end",
                "value" => empty($d_end)? '' : $d_end
            ],
        ]);

        $page_search->addCondition([
            'type' => 1,
            'label' => '所属仓库',
            'key' => 'depot_id',
            'value' => $depot_id,
            'options' => $depotData= $this->getDepot()

        ]);

        $this->view->page_search = $page_search->toArray();

        // 定义表格字段
        $tb_ths = [];
        $tb_ths[] = array("name" => "提交人", "width" => "100");
        $tb_ths[] = array("name" => "收货人", "width" => "100");
        $tb_ths[] = array("name" => "收货人电话", "width" => "160");
        $tb_ths[] = array("name" => "商品数量", "width" => "100");
        $tb_ths[] = array("name" => "订单总金额", "width" => "100");
        $tb_ths[] = array("name" => "订单积分", "width" => "70");
        $tb_ths[] = array("name" => "订单状态", "width" => "120");
        $tb_ths[] = array("name" => "所属仓库", "width" => "135");
        $tb_ths[] = array("name" => "订单提交时间", "width" => "200");
        $tb_ths[] = array("name" => "操作", "class" => "text-center", "width" => "175");

        // 定义表格操作
        // $actions = ["0"=>["name"=>"启用"], "1"=>["name"=>"禁用"]];
        $op = array(
            ["id_pre" => "tk_", "name" => "退款审核", "link" => "admin/order/refundAdd"]
        );
        $starNum = empty($page) || $page == 1 ? 0 : ($page-1) * $rows_value;
        //获取列表数据
        $ret = [];
        $stateDate = strtotime(str_replace('年','-',str_replace('月','-',str_replace('日','',$d_start))) . ' 00:00:00');
        $endDate = strtotime(str_replace('年','-',str_replace('月','-',str_replace('日','',$d_end))) . ' 23:59:59');
        $where .= empty($oid) ? '' : ' and ordercode = "'. $oid .'" ';
        $where .= empty($state) ? '' : ' and vstate = '. ($state == -1 ? 0 : $state) ;
        $where .= empty($d_start) ? '' : ' and btime  >'. $stateDate ;
        $where .= empty($d_end) ? '' : ' and btime <'. $endDate ;
        $where .= empty($tel) ? '' : ' and tel ="'. $tel .'"' ;
        $where .= empty($depot_id) ? '' : ' and depotid = '.$depot_id;

        $number = Order::count($where);
        $Orders = Order::find(['conditions' =>$where,'order' => 'btime desc','limit' =>['number' => 10,'offset' =>$starNum]]);


        if(!empty($type)){

            $Orders = Order::find(['conditions' =>$where,'order' => 'btime desc']);
            foreach($Orders as $value)
            {
                $row['userid'] = $value->memberinfo->nick;
                $row['vname'] = $value->vname;
                $row['tel'] = $value->tel;
                $row['num'] = $value->ordergoods->num;
                $row['totalPrice'] = $value->totalPrice;
                $row['integral'] = $value->integral;
                $row['vstate'] = $this->getState($value->vstate);
                $row['depotid'] = $value->Depot->title;
                $row['addTime'] = date('Y-m-d H:i',$value->btime);
                $ret[] = $row;
            }
            $filename = date('Y-m-d')."订单信息";
            $titlename = ['提交人','收货人','收货人电话','销售量','订单总金额','订单积分','订单状态','所属仓库','购买时间'];
            $this->excelData($ret,$titlename,$filename);
        }

        foreach($Orders as $value)
        {
            $whereStr = 'oid='.$value->ordercode;
            $row['id'] = '<a href="/sunny/admin/order/show?'.$whereStr.'">'.$value->ordercode.'</a>';
            $row['ids'] = $value->id;
            $row['userid'] = $value->memberinfo->nick;
            $row['vname'] = $value->vname;
            $row['tel'] = $value->tel;
            $row['num'] = $value->ordergoods->num;
            $row['totalPrice'] = $value->totalPrice;
            $row['integral'] = $value->integral;
            $row['vstate'] = $this->getState($value->vstate);
            $row['vstates'] = $value->vstate;
            $row['depotid'] = $value->Depot->title;
            $row['addTime'] = date('Y-m-d H:i',$value->btime);
            $ret[] = $row;
        }


        $using = array(
            ["field" => 'userid'],
            ["field" => 'vname'],
            ["field" => 'tel'],
            ["field" => 'num'],
            ["field" => 'totalPrice'],
            ["field" => 'integral'],
            ["field" => 'vstate'],
            ["field" => 'depotid'],
            ["field" => 'addTime']
        );

        // 定义使用数据
        $tb_trs = array(
            "data" => $ret,
            "using" => $using,
            "op" => $op
        );

        // 数据-表格列表
        $page_table["ths"] = $tb_ths;
        $page_table["trs"] = $tb_trs;
        $this->view->page_table = $page_table;

        // 页码
//        $params = $this->request->getQuery();
        //获取总数据
        $data_count = $number;
        $total = ceil($data_count/$rows_value);
        $pagination_cur = $this->request->getQuery("page", null, 1);
        $uriStr = $this->request->getURI();
        $uriArray = parse_url($uriStr);
        $queryStr = $uriArray['query'];
        parse_str($queryStr, $queryArray);
        $queryArray['page'] = "";
        $page_pagination = [
            "url" => $this->url->get("admin/order/search?" . http_build_query($queryArray)),
            "cur" => $pagination_cur,
            "total" => $total,
            "rows_value" => $rows_value,
            'data_total' => $data_count
        ];
        $this->view->tb_page = $page_pagination;

        // 使用普通模板
        $this->view->pick("order/list_pagination_ex");
    }
    //进入退款页面
    public function refundAddAction(){

        $id = $this->request->getQuery("id");
        $orderData = Order::findFirst('id = ' . $id);
        if(!empty($orderData->id)){
            $orderDatas['userid'] = $this->getUserInfo($orderData->userid);
            $orderDatas['ordercode'] = $orderData->ordercode;
            $orderDatas['totalPrice'] = $orderData->totalPrice;
            $orderDatas['mess'] = $this->getMess($orderData->ordercode);
        }
        $reg =[
            'id' => $orderData->ordercode
        ];
        // 表单数据
        $form = new RefundAddForm($reg);
        $form->setAction("admin/order/refundsave");
        $this->view->refund = $orderDatas;
        $this->view->form = $form;
        $this->view->pick("order/refundAdd");
    }

    public function refundsaveAction(){
        $this->db->begin();
        $oid = $this->request->getPost("id");
        $mess = $this->request->getPost("mess");
        $is_access = $this->request->getPost("is_access");
        $state = 5;
        if($is_access){
            $state = 1;
            if(empty($mess)){
               echo '<script>alert("说明不能为空！")</script>';exit;
            }
        }
        $orderData = Order::findFirst('ordercode = "'.$oid.'" and vstate = 4');
        if(!empty($orderData->id)){
                if($state == 1){
                    if(empty($orderData->userid)){
                        echo '<script>alert("退款异常！")</script>';exit;
                    }
                    if(empty($orderData->distribution) || empty($orderData->logisticsnum)){
                        $states = 1;
                    }else{
                        $states = 2;
                    }
                    $orderData->vstate = $states;
                    if($orderData->update() == false) {
                        $this->db->rollback();
                    }

                    $userInfo = Member::findFirst('id = '.$orderData->userid);
                    //添加退款失败记录
                    $intPayLogSql = 'insert into App\Models\PayLog (userid,type,AddSub,ordercode,title,totalprice,vstate,state,mess,addTime) VALUES ('.$orderData->userid.',0,1,"'.$orderData->ordercode.'","商城购买",'.$orderData->totalPrice.',6,1,"'.$mess.'",'.time().')';
                    $this->modelsManager->executeQuery($intPayLogSql);
                    //删除订单状态记录
                    //$delOrderLogSql = 'delete from App\Models\OrderLog where  ordercode= '.$orderData->ordercode.' and vstate = 4';
                    //$this->modelsManager->executeQuery($delOrderLogSql);

                    //给客户发送退款短信
                    /*if(!empty($orderData->tel)){
                        $data = [
                            'account' => $orderData->tel,
                            'tempId' => 153969,
                            'datas' =>[$oid]
                        ];
                        $this->sms->sendsms($data);
                    }*/
                    $data =[
                        'touser'=>$userInfo->account,
                        'template_id'=>'wdrYEHUEWcQOMGANgSk1U5tVLORRcW9W6TlzOedZRu4',
                        'url'=>'http://www.sunnyshu.cn/sunny/wap/api/memberlogin?isp=5',
                        'data'=>[
                            'first'=>[
                                'value' => '你好，您的退款申请被驳回',
                                'color' => '#EA0000'
                            ],
                            'keyword1'=>[
                                'value' => '退款驳回',
                                'color' => '#EA0000'
                            ],
                            'keyword2'=>[
                                'value' => number_format($orderData->totalPrice,2),
                                'color' => '#EA0000'
                            ],
                            'keyword3' => [
                                'value' => '不符合退款条件',
                                'color' => '#EA0000'
                            ],
                            "remark" => [
                                "value" => $mess,
                               "color" => ""
                            ]
                        ]
                    ];
                    //发送退款失败消息
                    $retData = $this->weixin->jssdk()->sendTemplateMessage($data);

                }elseif($state == 5){
                    $orderData->vstate = $state;
                    if($orderData->update() == false) {
                        $this->db->rollback();
                    }
                    //更新退款成功记录
                    $totalPrice = $orderData->totalPrice * 100;
                    $resp = $this->weixin->wxpay()->wx_refund($orderData->ordercode,$totalPrice,$totalPrice);
                    $this->log('退款返回参数：'.json_encode($resp));
                    if($resp['return_code'] == 'SUCCESS'){
                        $intPayLogSql = 'update App\Models\PayLog set vstate=5 where ordercode = "'.$oid.'" and vstate = 4 ';
                        if($this->modelsManager->executeQuery($intPayLogSql)->success() == false){
                            $this->db->rollback();
                        }else{
                            $this->refundLog(json_encode($resp));//文本记录退款记录
                        }
                    }
                }

        }

        /*$orderLog = new OrderLog();
        $orderLog->ordercode = $oid;
        $orderLog->state = $state;
        $orderLog->mess = $mess;
        $orderLog->btime = time();
        if($orderLog->create() == false){
            $this->db->rollback();
        }*/
        $this->db->commit();
        $this->response->redirect("admin/order/search");
    }

    public function showAction(){
        $pageHeader["title"] = "查看订单";
        $pageHeader["action"]["name"] = "订单详情页";
        $pageHeader["action"]["link"] = "admin/order/show";
        $this->view->page_header = $pageHeader;

        // 导航菜单
        $this->view->nav_menu = array_merge($this->view->nav_menu, array(array("name" => $pageHeader["title"])));
        $oid = $this->request->getQuery("oid");//普通订单
        $orderData = $this->getOrderInfo($oid);

        $this->view->orderDatas = $orderData;
        $this->view->pick("order/show");
    }
    private function getState($sate){
        $strState = '待支付';
        switch($sate){
            case 1:
                $strState = '待发货';
                break;
            case 2:
                $strState = '待收货';
                break;
            case 3:
                $strState = '交易完成';
                break;
            case 4:
                $strState = '退款中';
                break;
            case 5:
                $strState = '已退款';
                break;
            case 6:
                $strState = '交易关闭';
                break;
        }
        return $strState;
    }

    private function getOrderPayLog($oid){
        $orderLogs = [];
        $ordLog = OrderLog::find(['conditions' => 'ordercode = "' . $oid . '"','order' => 'state asc']);
        if(!empty($ordLog->count())){
            foreach ($ordLog as $value) {
                $orderLogs[] = [
                    'lable' => $this->getStateTitle($value->state),
                    'mess' => $value->mess,
                    'btime' => date('Y-m-d H:i:s',$value->btime)
                ];
            }
        }

        return $orderLogs;
    }

    private function getStateTitle($sate){
        $strState = '订单提交时间';
        switch($sate){
            case 1:
                $strState = '订单支付时间';
                break;
            case 2:
                $strState = '订单发货时间';
                break;
            case 3:
                $strState = '顾客收货时间';
                break;
            case 4:
                $strState = '申请退款时间';
                break;
            case 5:
                $strState = '完成退款时间';
                break;
            case 6:
                $strState = '交易关闭时间';
                break;
        }
        return $strState;
    }

    private function getMess($oid){
        $str = '';
        if(!empty($oid)){
            $orderMess = OrderLog::findFirst('ordercode = "'.$oid.'" and state = 4');
            $str = $orderMess->mess;
        }
        return $str;
    }
    //获取用户昵称
    private function getUserInfo($userid){
        $str ='';
        if(!empty($userid)){
            $userData = MemberInfo::findFirst('userid = ' . $userid);
            $str = $userData->nick;
        }
        return $str;
    }
    //
    private function getDepotInfo($depotid){
        $str ='';
        if(!empty($depotid)){
            $depotData = Depot::findFirst('id = ' . $depotid);
            $str = $depotData->title;
        }
        return $str;
    }

    private function getOrderInfo($oid){
        $orderData = [];
        if(!empty($oid)){
            $phql = "SELECT o.ordercode,o.masterorder,o.userid,o.totalPrice,o.vstate,o.depotid,o.vname,o.tel,o.province,o.city,o.address,o.distribution,o.logisticsnum,o.disPrice,o.mess,g.goods_id,g.goods_name,g.num,g.goods_price,g.fran_cash,g.totalPrice as totalPrices,g.con_integral,g.ref_integral  FROM App\Models\Order AS o left JOIN App\Models\OrderGoods as g  on o.ordercode=g.ordercode where o.ordercode ='".$oid."' ";
            $orderDatas = $this->modelsManager->executeQuery($phql);

            foreach($orderDatas as $key =>$value){
                //计算加盟店返现
                $franBalance = 0;
                if(!empty($value->fran_cash)){
                    $franBalance = round($value->totalPrices * ($value->fran_cash / 100),2);
                }
                if(!empty($value->con_integral)){
                    $conintegralBalance = round($value->totalPrices * ($value->con_integral / 100),2);
                }
                if(!empty($value->ref_integral)){
                    $refintegralBalance = round($value->totalPrices * ($value->ref_integral / 100),2);
                }
                //商品信息
                $orderData['orderGoods'][] = [
                    'goods_id'=>  $value->goods_id,
                    'goods_name'=>  $value->goods_name,
                    'num'=>  $value->num,
                    'goods_price'=>  $value->goods_price,
                    'franBalance' => $franBalance,
                    'conintegralBalance' => $conintegralBalance,
                    'refintegralBalance' => $refintegralBalance

                ];
                if( $key < 1 ){

                    //$userInfo = MemberInfo::findFirst(' userid = '.$value->userid);//当前用户的信息
                    //根据省份和城市筛选加盟店
                    $franName = '该城市没有加盟店';
                    $franchise = Franchise::findFirst('province = "'.$value->province.'" and city = "'.$value->city.'"');
                    if(!empty($franchise->id)){
                        $franName = $franchise->title;
                    }

                    $orderData['ordercode'] = $value->ordercode;
                    $orderData['state'] = $this->getState($value->vstate);
                    $orderData['depot_name'] = $this->getDepotInfo($value->depotid);

                    //收货人信息
                    $orderData['vname'] = $value->vname;
                    $orderData['tel'] = $value->tel;
                    $orderData['address'] = $value->province . $value->city . $value->address;
                    //物流信息
                    $orderData['distribution'] = empty($value->distribution)?'暂无信息':$value->distribution;
                    $orderData['logisticsnum'] = empty($value->logisticsnum)?'暂无单号':$value->logisticsnum;
                    //金额处理
                    $orderData['disPrice'] = $value->disPrice;
                    $orderData['totalPrice'] = $value->totalPrice;
                    $orderData['ret_integral'] = 0;
                    $orderData['franchise_name'] = $franName;
                    //$orderData['franchise_price'] = 12;//返现金额
                    $orderData['userid'] = $this->getUserInfo($value->userid);
                    $orderData['mess'] = empty($value->mess)?'没有留言':$value->mess;
                    //订单状态
                    $orderData['orderLog'] = $this->getOrderPayLog($value->ordercode);
                }
            }
        }
        return $orderData;
    }
    //获取仓库列表
    private function getDepot(){
        $depotObj = Depot::find('is_show = 1');
        $depotData= [];
        foreach ($depotObj as $row) {
            $depotData[$row->id] = $row->title;

        }
        return $depotData;
    }

    /*
    *处理Excel导出
    *@param $datas array 设置表格数据
    *@param $titlename string 设置head
    *@param $title string 设置表头
    */
    public function excelData($datas,$titlename,$filename){
        $this->Excel->getExcel($datas,$titlename,$filename);
        exit;
    }
}
