<?php
/**
 * Created by PhpStorm.
 * User: MiaoGang
 * Date: 2016/8/31
 * Time: 11:10
 */
namespace App\Background\Controllers;

use App\Background\Forms\PersonForm;

class PersonController extends BaseController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $menu = $this->menu;
        $this->view->menu_root = $menu;
        $this->view->nav_menu = array_merge(array($this->view->nav_menu), array(array("name" => "用户个人中心", "link" => "admin/person")));
    }

    public function indexAction()
    {
        if($this->request->isGet()){
            $this->assets->addCss('public/static/background/css/common.css');
            $this->addLibJs('libs/jsapi/form-mutex-operations.js');
            $this->addLibJs('libs/jsapi/admin-profile.js');
            $out = $this->view->nav_menu;
            $ret = array_push($out, array("name" => "用户个人基本信息", "link" => "admin"));
            $this->view->nav_menu = $out;

            $user = $this->login->getUser();
            if(!isset($user->id)){
                $this->log("no matched user found!!! session not invalid");
                $this->session->destroy();
                return $this->response->redirect("admin/");
            }
            if($user->role_id == $this->rbac->getSupperRoleId()){
                $roleName = $this->rbac->getSupperRoleName();
            }else{
                $role = $this->rbac->getRoleById($user->role_id);
                $roleName = $role->getTitle();
            }

            $pageHeader["title"] = "用户个人基本信息";
            $pageHeader["action"]["name"] = '<span class="fa fa-wrench">&nbsp;&nbsp;修改密码</span>';
            $pageHeader["action"]["link"] = "admin/person/change";
            $this->view->page_header = $pageHeader;
            $form = new PersonForm(['name'=>$user->name, "role" => $roleName], []);
            $this->view->form = $form;
        }else{
            return $this->response->setStatusCode(403);
        }
    }

    /**
     * 修改密码
     */
    public function passwordAction()
    {
        if($this->request->isPost()){
            $reqData = $this->getJsonArrayBody(array('password', 'password_new', 'password_confirm'));
            if(!is_array($reqData)){
                return $this->responseJson(null, "1007");
            }
            $user = $this->login->getUser();
            if (!$this->security->checkHash($reqData['password'], $user->password)) {
                $this->log("当前登录密码错误！");
                return $this->responseJson(null, "1008");
            }
            if($reqData['password_new'] != $reqData['password_confirm']){
                $this->log("两次输入密码不匹配！");
                return $this->responseJson(null, "1007");
            }
            $ret = $this->login->setPassword($user->id, $reqData['password_new']);
            if(false == $ret){
                return $this->responseJson(null, "0998");
            }
            return $this->responseJson();
        }else{
            return $this->response->setStatusCode(403);
        }
    }

    public function passwordModifyAction(){
        // 数据-页头
        $pageHeader["title"] = "修改密码";
        $pageHeader["action"]["name"] = "分类列表";
        $pageHeader["action"]["link"] = "admin/person/password";
        $this->view->page_header = $pageHeader;

        // 导航菜单
        $this->view->nav_menu = array_merge($this->view->nav_menu, array(array("name" => $pageHeader["title"])));

        $cateData[] = '一级分类';

        $cateData = [
            'pidData' => $cateData,
            'is_show' => true
        ];
        // 表单数据
        $form = '';
        //print_r($form);exit;
        $form->setAction("admin/category/create");
        $this->view->form = $form;
        $this->view->pick("partials/tp_page_form");
    }

    public function infoAction()
    {
        if($this->request->isPost()){
            $reqData = $this->getJsonArrayBody(array('name'));
            if(!is_array($reqData)){
                return $this->responseJson(null, "1007");
            }
            $user = $this->login->getUser();
            $user->name = $reqData['name'];
            $user->save();
            return $this->responseJson();
        }else{
            return $this->response->setStatusCode(403);
        }
    }
}